<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AndiSoft.Utilities</name>
    </assembly>
    <members>
        <member name="T:AndiSoft.Utilities.AndiConvert">
            <summary>
            Useful Conversions
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.AndiConvert.TryParse(System.String,System.DateTime@,System.String)">
            <sumary>
            Transform string into dateTime. Returns null if parse is not successful
            </sumary>
        </member>
        <member name="M:AndiSoft.Utilities.AndiConvert.ToFloat(System.String)">
            <summary>
            Returns a float number. Returns 0 if the string is not a valid number.
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.AndiConvert.ToDouble(System.String)">
            <summary>
            Returns a double number. Returns 0 if the string is not a valid number.
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.AndiConvert.ToDecimal(System.String)">
            <summary>
            Returns a decimal number. Returns 0 if the string is not a valid number.
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.AndiConvert.ToInt(System.String)">
            <summary>
            Returns a integer number. Returns 0 if the string is not a valid number.
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.AndiConvert.Parse``1(System.Object)">
            <summary>
            Converts the object to the given type.
            </summary>
            <param name="obj">Object to be converted.</param>
            <returns>New object of the given type.</returns>
        </member>
        <member name="M:AndiSoft.Utilities.AndiConvert.TryParse``1(System.Object,``0@)">
            <summary>
            Try to parse object to the given type.
            </summary>
            <param name="obj">Object to be parsed.</param>
            <param name="newObj">New parsed object.</param>
            <returns>True if sucessful. False otherwise.</returns>
        </member>
        <member name="T:AndiSoft.Utilities.AndiHelper">
            <summary>
            Some helpers to treat string and other data
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.AndiHelper.GetNumbersOnly(System.String)">
            <summary>
            Returns only numbers of a string
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AndiSoft.Utilities.AndiHelper.GetLettersOnly(System.String)">
            <summary>
            Returns only letters of a tring
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AndiSoft.Utilities.AndiHelper.GetLettersAndNumbers(System.String)">
            <summary>
            Returns only letter or numbers of a tring
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AndiSoft.Utilities.AndiHelper.GetMobileNumber(System.String)">
            <summary>
            For brazilian phone numbers. Returns a valid phone number if possible.
            If the given string cannot be parsed to a valid phone number, returns null.
            If phone is a mobile number (starts with 8 or 9), and has 8 digits apart from the area code, the leading 9 will be inserted.
            </summary>
            <param name="phone"></param>
            <returns></returns>
        </member>
        <member name="T:AndiSoft.Utilities.AndiUtils">
            <summary>
            Other useful functions
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.AndiUtils.ReadTextFile(System.String)">
            <summary>
            Reads a text file to a string
            </summary>
            <param name="filePath">File path</param>
            <returns></returns>
        </member>
        <member name="T:AndiSoft.Utilities.AndiValidation">
            <summary>
            
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.AndiValidation.IsNumberOnly(System.String)">
            <summary>
            Checks if a given string contains only number. If any char is not numeric, the return is false.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AndiSoft.Utilities.AndiValidation.IsStrongPassword(System.String)" -->
        <member name="M:AndiSoft.Utilities.AndiValidation.IsValidCpf(System.String)">
            <summary>
            Verifies if the given string is a valid CPF.
            </summary>
            <param name="cpf"></param>
            <returns></returns>
        </member>
        <member name="M:AndiSoft.Utilities.AndiValidation.IsValidCnpj(System.String)">
            <summary>
            Verifies if the given string is a valid CNPJ
            </summary>
            <param name="cnpj"></param>
            <returns></returns>
        </member>
        <member name="M:AndiSoft.Utilities.AndiValidation.IsValidEmail(System.String)">
            <summary>
            Check if the given string is a valid email address
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.AndiValidation.IsValidDate(System.String)">
            <summary>
            Check if given string is a valid date
            </summary>
            <param name="date">Date (dd/MM/yyyy)</param>
            <returns></returns>
        </member>
        <member name="M:AndiSoft.Utilities.AndiValidation.IsValidDate(System.String,System.String)">
            <summary>
            Check if given string is a valid date
            </summary>
            <param name="date">Date string</param>
            <param name="format">Date format. Default: dd/MM/yyyy</param>
            <returns></returns>
        </member>
        <member name="M:AndiSoft.Utilities.AndiValidation.IsValidMobileNumber(System.String)">
            <summary>
            Check if given string is a valid mobile number in Brazil
            </summary>
            <param name="phone"></param>
            <returns></returns>
        </member>
        <member name="M:AndiSoft.Utilities.AndiValidation.IsValidMobileNumber(System.String@)">
            <summary>
            Check if given string is a valid mobile number and removes special characters
            </summary>
            <param name="phone"></param>
            <returns></returns>
        </member>
        <member name="T:AndiSoft.Utilities.Converters.ConvertDateTime">
            <summary>
            DateTime Converter
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.Converters.ConvertDateTime.TryParse(System.String,System.DateTime@,System.String)">
            <sumary>
            Transform string into dateTime. Returns null if parse is not successful
            </sumary>
        </member>
        <member name="T:AndiSoft.Utilities.Converters.ConvertNumber">
            <summary>
            Number Converter
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.Converters.ConvertNumber.ToFloat(System.String)">
            <summary>
            Returns a float number. Returns 0 if the string is not a valid number.
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.Converters.ConvertNumber.ToDouble(System.String)">
            <summary>
            Returns a double number. Returns 0 if the string is not a valid number.
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.Converters.ConvertNumber.ToDecimal(System.String)">
            <summary>
            Returns a decimal number. Returns 0 if the string is not a valid number.
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.Converters.ConvertNumber.ToInt(System.String)">
            <summary>
            Returns a integer number. Returns 0 if the string is not a valid number.
            </summary>
        </member>
        <member name="T:AndiSoft.Utilities.Converters.GenericsConverter`1">
            <summary>
            Converts object types.
            </summary>
            <typeparam name="T">Destination type for the conversion.</typeparam>
        </member>
        <member name="M:AndiSoft.Utilities.Converters.GenericsConverter`1.Convert(System.Object)">
            <summary>
            Converts the object to the given type.
            </summary>
            <param name="obj">Object to be converted.</param>
            <returns>New object of the given type.</returns>
        </member>
        <member name="M:AndiSoft.Utilities.Converters.GenericsConverter`1.TryParse(System.Object,`0@)">
            <summary>
            Try to parse object to the given type.
            </summary>
            <param name="obj">Object to be parsed.</param>
            <param name="newObj">New parsed object.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="T:AndiSoft.Utilities.Extensions.DateTimeExtension">
            <summary>
            DateTime extension
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.Extensions.DateTimeExtension.AddWorkdays(System.DateTime,System.Int32,System.Collections.Generic.List{System.DateTime})">
            <summary>
            Takes a date, and adds the given workdays
            </summary>
            <param name="date"></param>
            <param name="workDays">Amount of workdays to add</param>
            <param name="holidays">If present, these dates will be ignored as workdays</param>
            <returns></returns>
        </member>
        <member name="M:AndiSoft.Utilities.Extensions.DateTimeExtension.IsWorkDay(System.DateTime)">
            <summary>
            Check if a date is work day
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:AndiSoft.Utilities.Extensions.DateTimeExtension.IsHoliday(System.DateTime,System.Collections.Generic.List{System.DateTime})">
            <summary>
            Check if a given date is holiday according to the given holiday list
            </summary>
            <param name="date"></param>
            <param name="holidays">Holiday list</param>
            <returns></returns>
        </member>
        <member name="M:AndiSoft.Utilities.Extensions.EnumExtension.GetEnumDescription(System.Enum)">
            <summary>
            Returns the Description of the Enum
            <para/>
            If the enum doesn't have a Description, returns the toString of the Enum
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AndiSoft.Utilities.Extensions.EnumExtension.GetValueByDescription(System.Type,System.String)">
            <summary>
            Returns the EnumValue of the given description.
            <para/>
            How to use: var response = typeof(MyEnum).GetValueByDescription("MyDescription");
            <line/>
            var value = (MyEnum)response;
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.Extensions.EnumExtension.Contains(System.Enum,System.Enum)">
            <summary>
            Check if a certain enum value contains the enum input. 
            This can be usefull if the enum contains more than one value
            <para/>
            Example: 
            <code> 
            (TestEnum.Value1 | TestEnum.Value2).Contains(TestEnum.Value1) == true
            </code>
            <para/>
            If the inputs contains values that this enum does not, it returns true.
            <code> 
            (TestEnum.Value1 | TestEnum.Value2).Contains(TestEnum.Value1 | TestEnum.Value4) == true
            </code>
            </summary>
            <param name="value"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:AndiSoft.Utilities.Extensions.EnumExtension.ContainsAll(System.Enum,System.Enum)">
            <summary>
            Check if a certain enum value contains the enum input. 
            This can be useful if the enum contains more than one value
            <para/>
            Example: 
            <code> 
            (TestEnum.Value1 | TestEnum.Value2).Contains(TestEnum.Value1) == true
            </code>
            <para/>
            If the inputs contains values that this enum does not, it returns false.
            <code> 
            (TestEnum.Value1 | TestEnum.Value2).Contains(TestEnum.Value1 | TestEnum.Value4) == false
            </code>
            </summary>
            <param name="value"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:AndiSoft.Utilities.Extensions.ExceptionExtension">
            <summary>
            Extension methods for Exceptions
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.Extensions.ExceptionExtension.SetExceptionGuid(System.Exception,System.String)">
            <summary>
            Saves GUID value to Data["GUID"].
            </summary>
            <param name="ex"></param>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:AndiSoft.Utilities.Extensions.ExceptionExtension.GetExceptionGuid(System.Exception)">
            <summary>
            Gets GUID value in Data["GUID"]. If no value is present, a new GUID is generated and saved in Data["GUID"].
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:AndiSoft.Utilities.Extensions.ExceptionExtension.SetErrorCode(System.Exception,System.String)">
            <summary>
            Saves the error code in Data["ErrorCode"].
            </summary>
            <param name="ex"></param>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:AndiSoft.Utilities.Extensions.ExceptionExtension.GetErrorCode(System.Exception)">
            <summary>
            Get error code in Data["ErrorCode"].
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:AndiSoft.Utilities.Extensions.ExceptionExtension.GetInnerExceptions(System.Exception,System.Boolean)">
            <summary>
            List inner exceptions of an exception
            </summary>
            <param name="exception"></param>
            <param name="includeCurrent"></param>
            <returns></returns>
        </member>
        <member name="T:AndiSoft.Utilities.Extensions.JsonExtension">
            <summary>
            Json Extension methods
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.Extensions.JsonExtension.ToJson(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Converts object to a Json string.
            </summary>
            <param name="obj">Object to be converted</param>
            <param name="identJson">Whether the json should be indented</param>
            <param name="ignoreNullValues">If true, null objects will not be present</param>
            <returns></returns>
        </member>
        <member name="M:AndiSoft.Utilities.Extensions.ListExtension.AnyEqualElement``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            Checks whether two lists have at least one element in common.
            <para/>
            The method Object.Equals is used to compare both elements.
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.Extensions.ListExtension.AnyEqualElement``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Checks whether two lists have at least one element in common.
            <para/>
            The <code>areEqualFunc</code> parameter is a function used to compare both elements.
            </summary>
        </member>
        <member name="T:AndiSoft.Utilities.Extensions.StringExtension">
            <summary>
            String Extensions
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.Extensions.StringExtension.Capitalize(System.String)">
            <summary>
            Converts the first char of a string to UpperCase
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.Extensions.StringExtension.CapitalizeSentence(System.String,System.String[],System.String[])">
            <summary>
            Capitalizes every word on a given string.
            <para/> If param <c>wordsLowerCase</c> is used, every word on array <c>wordsLowerCase</c> won't be Capitalized, but as lower case
            <para/> If param <c>wordsUpperCase</c> is used, every word on array <c>wordsUpperCase</c> won't be Capitalized, but as upper case
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.Extensions.StringExtension.CapitalizeTitlePt(System.String,System.String[],System.String[])">
            <summary>
            Capitalizes every word on a given string, excluding PT prepositions
            <para/> If param <c>wordsLowerCase</c> is used, every word on array <c>wordsLowerCase</c> won't be Capitalized, but as lower case
            <para/> If param <c>wordsUpperCase</c> is used, every word on array <c>wordsUpperCase</c> won't be Capitalized, but as upper case
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.Extensions.StringExtension.ContainsCaseIgnored(System.String[],System.String)">
            <summary>
            Check if the list of strings contains a given string. It is not case-sensitive
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.Extensions.StringExtension.ContainsCaseIgnored(System.String,System.String)">
            <summary>
            Check if the string contains a given string. It is not case-sensitive
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.Extensions.StringExtension.EqualsCaseIgnored(System.String,System.String)">
            <summary>
            Check if the string is equal to the given value. It is not case-sensitive
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.Extensions.StringExtension.IsNullOrEmpty(System.String)">
            <summary>
            A simpler way to check if a string is null, empty or white-space only.
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.Extensions.StringExtension.ToDateTime(System.String,System.String)">
            <summary>
            Converts string to DateTime
            </summary>
            <param name="date"></param>
            <param name="format">Date format. Default: dd/MM/yyyy</param>
            <returns></returns>
        </member>
        <member name="M:AndiSoft.Utilities.Extensions.StringExtension.RemoveAccents(System.String)">
            <summary>
            Remove diacritics
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AndiSoft.Utilities.Extensions.StringExtension.RemoveSpecialCharacters(System.String)">
            <summary>
            Remove all chars that are not letters or numbers
            </summary>
        </member>
        <member name="T:AndiSoft.Utilities.Internals.NumberToStringJsonConverter">
            <summary>
            Converts number to string
            </summary>
        </member>
        <member name="T:AndiSoft.Utilities.JsonParser">
            <summary>
            Converts objects to Json
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.JsonParser.ToJson(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Converts object to a Json string.
            </summary>
            <param name="obj"></param>
            <param name="identJson">Ident json result.</param>
            <param name="ignoreNullValues"></param>
            <returns></returns>
        </member>
        <member name="M:AndiSoft.Utilities.JsonParser.MinifyJson(System.String)">
            <summary>
            Converts Json string to a minified version
            </summary>
            <param name="json">Json string to be minified</param>
            <returns></returns>
        </member>
        <member name="M:AndiSoft.Utilities.JsonParser.BeautifyJson(System.String)">
            <summary>
            Converts Json string to a pretty version
            </summary>
            <param name="json">Json string to be beautified</param>
            <returns></returns>
        </member>
        <member name="M:AndiSoft.Utilities.JsonParser.JsonFromFile``1(System.String)">
            <summary>
            Read object from a json file
            </summary>
            <param name="filePath">File path</param>
            <typeparam name="T">Target object</typeparam>
            <returns>Result object</returns>
        </member>
        <member name="M:AndiSoft.Utilities.JsonParser.ParseObject(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Converts objects to Json string.
            </summary>
            <param name="obj">Object to be serialized.</param>
            <param name="identJson">Ident json result.</param>
            <param name="ignoreNullValues">If true, null values will not be included in the Json string. Default is false.</param>
            <returns></returns>
        </member>
        <member name="M:AndiSoft.Utilities.JsonParser.ParseJson``1(System.String)">
            <summary>
            Converts Json string to the specified object
            </summary>
            <param name="jsonString">Json string</param>
            <returns>Parsed object</returns>
        </member>
        <member name="M:AndiSoft.Utilities.JsonParser.TryParse(System.Object,System.String@,System.Boolean)">
            <summary>
            Try to parse object to the given type.
            </summary>
            <param name="obj">Object to be parsed.</param>
            <param name="jsonString">New parsed object.</param>
            <param name="ignoreNullValues">If true, null values will not be included in the Json string. Default is false.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:AndiSoft.Utilities.JsonParser.TryParse``1(System.String,``0@)">
            <summary>
            Try to parse object to the given type.
            </summary>
            <param name="jsonString">Object to be parsed.</param>
            <param name="obj">New parsed object.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="T:AndiSoft.Utilities.PasswordGenerator">
            <summary>
            Password Generator
            </summary>
        </member>
        <member name="M:AndiSoft.Utilities.PasswordGenerator.GenerateAlphaNumeric(System.Int32)">
            <summary>
            Gera senhas alfanuméricas.
            </summary>
            <param name="size">Quantidade de caracteres.</param>
            <returns>Senha aleatória</returns>
        </member>
        <member name="M:AndiSoft.Utilities.PasswordGenerator.GenerateNumeric(System.Int32)">
            <summary>
            Gera senhas numéricas.
            </summary>
            <param name="size">Quantidade de caracteres.</param>
            <returns>Senha aleatória</returns>
        </member>
        <member name="M:AndiSoft.Utilities.PasswordGenerator.GenerateStrongPassword(System.Int32)">
            <summary>
            Gera senhas com algarismos alfanuméricos e símbolos.
            </summary>
            <param name="size">Quantidade de caracteres.</param>
            <returns>Senha aleatória</returns>
        </member>
    </members>
</doc>
